import gfx.utils.Delegate;import gfx.ui.InputDetails;import gfx.ui.NavigationCode;import gfx.controls.Button;//import com.scaleform.udk.controls.FocusItemRenderer;import gfx.controls.CoreList;import gfx.controls.ListItemRenderer;import mx.transitions.easing.Strong;import gfx.motion.Tween;import gfx.utils.Constraints;[InspectableList("disabled", "visible", "labelID", "disableConstraints")] class com.scaleform.udk.controls.ResultItemRendererBlue extends ListItemRenderer{	private var classicon:MovieClip;	private var bg:MovieClip;	private var codename:TextField;	private var score:TextField;	private var kill:TextField;	private var assist:TextField;	private var death:TextField;	private var exp:TextField;	private var _mechk:String;	private var _classicon:String;	private var _codename:String;	private var _score:String;	private var _kill:String;	private var _assist:String;	private var _death:String;	private var _exp:String;	private var intervalId:Number;	private var count:Number = 1;	private var maxCount:Number = 1;	private var duration:Number = 7000;	//private var _iconmemc:String	// Initialization:	public function ResultItemRendererBlue()	{		super();		Tween.init();	}	public function setData(data:Object):Void	{		if (data == undefined)		{			bg._visible = true;			return;		}		this.data = data;		invalidate();		this._visible = true;		super.setData(data);		_mechk = data.MeChk;		_classicon = data.ClassIcon;		_codename = data.CodeName;		_score = data.Score;		_kill = data.Kill;		_assist = data.Assist;		_death = data.Death;		_exp = data.Exp;		UpdateTextFields();	}	private function lvLoader()	{		var mcLoader:MovieClipLoader = new MovieClipLoader();		mcLoader.addListener(this);		mcLoader.loadClip("imgset_class.swf",classicon);	}	private function onLoadInit(mc:MovieClip)	{		if (_mechk == 1)		{			classicon._visible = false;		}		else		{			classicon._visible = true;		}		var lvNo:String = _classicon;		var KD:String = lvNo.charAt(0);		var LV:String = lvNo.charAt(1);		var chkCl:String = lvNo.substr(2, 3);		var CL:String;		if (chkCl.charAt(0) == "0")		{			CL = chkCl.charAt(1);		}		else		{			CL = chkCl;		}		classicon.lv0.gotoAndStop(Number(CL) + 1);		classicon.lv1.gotoAndStop(Number(LV) + 1);		classicon.lv2.gotoAndStop(Number(KD) + 1);	}	private function onMeAnimation()	{		/*		trace("executeCallback intervalId: "+intervalId+" count: "+count);		if (count>=maxCount)		{		clearInterval(intervalId);		}		*/		var tmc:MovieClip = MovieClip(this);		tmc.bg.gotoAndStop(2);		tmc.classicon._visible = false;		tmc.codename._visible = false;		tmc.score._visible = false;		tmc.kill._visible = false;		tmc.assist._visible = false;		tmc.death._visible = false;		tmc.exp._visible = false;		tmc.bg.tweenTo(0.5,{_width:bg._width + 13, _height:32 + 13},Strong.easeOut);		tmc.bg.onTweenComplete = tweenComp;		//MovieClip(this).classicon.tweenTo(0.5,{_xscale:150, _yscale:150},Strong.easeOut);		//MovieClip(this).codename.tweenTo(0.5,{_xscale:105, _yscale:105, _x:this.codename._x},Strong.easeOut);		//MovieClip(this).score.tweenTo(0.5,{_xscale:105, _yscale:105, _x:this.score._x},Strong.easeOut);		//MovieClip(this).kill.tweenTo(0.5,{_xscale:105, _yscale:105, _x:this.kill._x},Strong.easeOut);		//MovieClip(this).assist.tweenTo(0.5,{_xscale:105, _yscale:105, _x:this.assist._x},Strong.easeOut);		//MovieClip(this).death.tweenTo(0.5,{_xscale:105, _yscale:105, _x:this.death._x},Strong.easeOut);		//MovieClip(this).exp.tweenTo(0.5,{_xscale:105, _yscale:105, _x:this.exp._x},Strong.easeOut);	}	private function tweenComp()	{		delete this._parent.bg.onTweenComplete;		var tmc = this._parent;		tmc.classicon._xscale = 150;		tmc.classicon._yscale = 150;		tmc.classicon._x = tmc.classicon._x - 14;		tmc.classicon._y = tmc.classicon._y - 5;		tmc.codename._xscale = 140;		tmc.codename._yscale = 140;		tmc.codename._x = tmc.codename._x - 10;		tmc.codename._y = tmc.codename._y - 4;		tmc.score._xscale = 150;		tmc.score._yscale = 150;		tmc.score._x = tmc.score._x - 10;		tmc.score._y = tmc.score._y - 5;		tmc.kill._xscale = 150;		tmc.kill._yscale = 150;		tmc.kill._x = tmc.kill._x - 10;		tmc.kill._y = tmc.kill._y - 5;		tmc.assist._xscale = 150;		tmc.assist._yscale = 150;		tmc.assist._x = tmc.assist._x - 10;		tmc.assist._y = tmc.assist._y - 5;		tmc.death._xscale = 150;		tmc.death._yscale = 150;		tmc.death._x = tmc.death._x - 10;		tmc.death._y = tmc.death._y - 5;		tmc.exp._xscale = 150;		tmc.exp._yscale = 150;		tmc.exp._x = tmc.exp._x - 35;		tmc.exp._y = tmc.exp._y - 5;		tmc.classicon._visible = true;		tmc.codename._visible = true;		tmc.score._visible = true;		tmc.kill._visible = true;		tmc.assist._visible = true;		tmc.death._visible = true;		tmc.exp._visible = true;		trace("complete");	}	// This method is fired after the state has changed to allow the component to ensure the state is up-to-date.  For instance, updating the contraints in Button.	private function updateAfterStateChange():Void	{		// Redraw should only happen AFTER the initialization.		if (!initialized)		{			return;		}		validateNow();// Ensure that the width/height is up to date.		//arrow._z = -450;		//arrow._y = -50;		//trace (_label)		if (constraints != null)		{			constraints.update(width,height);		}		dispatchEvent({type:"stateChange", state:state});	}	// Private Methods:    	private function UpdateTextFields()	{		codename.text = _codename;		score.text = _score;		kill.text = _kill;		assist.text = _assist;		death.text = _death;		exp.text = _exp;		//		lvLoader();		//		if (_mechk == 1)		{			this.swapDepths(102);			onMeAnimation();			//beginInterval();		}		else		{			this.swapDepths(100);		}	}	private function beginInterval():Void	{		if (intervalId != null)		{			trace("clearInterval");			clearInterval(intervalId);		}		intervalId = setInterval(this, "onMeAnimation", duration);	}}